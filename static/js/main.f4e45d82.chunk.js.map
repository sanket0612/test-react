{"version":3,"sources":["serviceWorker.js","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","Square","props","react_default","a","createElement","className","onClick","value","Board","i","_this","this","squares","renderSquare","React","Component","Game","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","history","Array","fill","xIsNext","stepNumber","slice","length","calculateWinner","setState","concat","step","status","_this3","current","winner","moves","map","move","desc","key","jumpTo","src_Board","handleClick","lines","_lines$i","slicedToArray","b","c","ReactDOM","render","src_Game","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.f4e45d82.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n//ReactDOM.render(<App />, document.getElementById('root'));\nfunction Square(props){\n\t  return(\n\t    <button className=\"square\" onClick={props.onClick}>{props.value}\n\t    </button>\n\t  );\n\t}\n\n\tclass Board extends React.Component {\n\t  renderSquare(i) {\n\t    return <Square \n\t             value={this.props.squares[i]}\n\t             onClick={()=>this.props.onClick(i)}\n\t            />;\n\t  }\n\n\t  render() {\n\t    return (\n\t      <div>\n\t        <div className=\"board-row\">\n\t          {this.renderSquare(0)}\n\t          {this.renderSquare(1)}\n\t          {this.renderSquare(2)}\n\t        </div>\n\t        <div className=\"board-row\">\n\t          {this.renderSquare(3)}\n\t          {this.renderSquare(4)}\n\t          {this.renderSquare(5)}\n\t        </div>\n\t        <div className=\"board-row\">\n\t          {this.renderSquare(6)}\n\t          {this.renderSquare(7)}\n\t          {this.renderSquare(8)}\n\t        </div>\n\t      </div>\n\t    );\n\t  }\n\t}\n\n\tclass Game extends React.Component {\n\t  constructor(props){\n\t    super(props);\n\t    this.state={\n\t      history:[\n\t        {\n\t          squares:Array(9).fill(null)\n\t        }\n\t      ],\n\t      xIsNext:true,\n\t      stepNumber:0,\n\t    }\n\t  }\n\n\t  \n\t  handleClick(i){\n\t    const history=this.state.history.slice(0,this.state.stepNumber+1);\n\t    const current=history[history.length-1];\n\t    const squares=current.squares.slice();\n\t    \n\t    if(calculateWinner(squares) || squares[i])\n\t      return; \n\t    squares[i]=this.state.xIsNext ? \"X\" : \"O\";\n\t    \n\t    this.setState({\n\t      history:history.concat([\n\t        {\n\t            squares:squares,\n\t            }\n\t      ]),\n\t      stepNumber:history.length,\n\t      xIsNext:!this.state.xIsNext\n\t                 \n\t    });\n\t    \n\t  }\n\t   jumpTo(step){\n\t    this.setState({\n\t      stepNumber: step,\n\t      xIsNext:(step%2)==0\n\t    });\n\t  }\n\t  \n\t  render() {\n\t    const history=this.state.history;\n\t    const current=history[this.state.stepNumber];\n\t    const winner=calculateWinner(current.squares);\n\t    \n\t    const moves=history.map((step,move)=>{\n\t      const desc = move ? 'Go to move #' + move : 'Go to game start';\n\t      return(\n\t      <li key={move}>\n\t          <button onClick={()=>this.jumpTo(move)}>{desc}</button>\n\t        </li>\n\t      );\n\t      \n\t    })\n\t    \n\t    let status;\n\t    if(winner)\n\t      status='Winner is : '+winner;\n\t    else\n\t      status='Next Player '+(this.state.xIsNext ? 'X' : 'O');\n\t    \n\t     return (\n\t      <div className=\"game\">\n\t        <div className=\"game-board\">\n\t          <Board \n\t            squares={current.squares}\n\t            onClick={i => this.handleClick(i)}\n\t            />\n\t        </div>\n\t        <div className=\"game-info\">\n\t          <div>{status}</div>\n\t          <ol>{moves}</ol>\n\t        </div>\n\t      </div>\n\t    );\n\t  }\n\t}\n\n\t// ========================================\n\n\tReactDOM.render(\n\t  <Game />,\n\t  document.getElementById('root')\n\t);\n\n\tfunction calculateWinner(squares) {\n\t  const lines = [\n\t    [0, 1, 2],\n\t    [3, 4, 5],\n\t    [6, 7, 8],\n\t    [0, 3, 6],\n\t    [1, 4, 7],\n\t    [2, 5, 8],\n\t    [0, 4, 8],\n\t    [2, 4, 6],\n\t  ];\n\t  for (let i = 0; i < lines.length; i++) {\n\t    const [a, b, c] = lines[i];\n\t    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n\t      return squares[a];\n\t    }\n\t  }\n\t  return null;\n\t}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}